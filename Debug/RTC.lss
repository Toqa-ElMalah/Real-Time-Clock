
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ece  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000005c  00800060  00000ece  00000f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  008000bc  008000bc  00000fbe  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00000fc0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  0000168c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00001718  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013ba  00000000  00000000  00001858  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000553  00000000  00000000  00002c12  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a22  00000000  00000000  00003165  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c0  00000000  00000000  00003b88  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ac  00000000  00000000  00003e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000cf7  00000000  00000000  000041f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 cb 06 	jmp	0xd96	; 0xd96 <__vector_5>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ec       	ldi	r30, 0xCE	; 206
  68:	fe e0       	ldi	r31, 0x0E	; 14
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 3c       	cpi	r26, 0xC2	; 194
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <main>
  8a:	0c 94 65 07 	jmp	0xeca	; 0xeca <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macrous.h"

void DIO_vsetPINDir (unsigned char port,unsigned char pinnumber,unsigned char direction){
	switch (port){
  92:	82 34       	cpi	r24, 0x42	; 66
  94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
  96:	83 34       	cpi	r24, 0x43	; 67
  98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
  9a:	81 34       	cpi	r24, 0x41	; 65
  9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
  9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
  a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
  a2:	83 34       	cpi	r24, 0x43	; 67
  a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
  a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
  a8:	84 34       	cpi	r24, 0x44	; 68
  aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
  ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
  ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
		
		case'A':
		if (direction==1){
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
			SET_BIT(DDRA,pinnumber);
  b4:	2a b3       	in	r18, 0x1a	; 26
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	ac 01       	movw	r20, r24
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
  be:	44 0f       	add	r20, r20
  c0:	55 1f       	adc	r21, r21
  c2:	6a 95       	dec	r22
  c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
  c6:	ba 01       	movw	r22, r20
  c8:	62 2b       	or	r22, r18
  ca:	6a bb       	out	0x1a, r22	; 26
  cc:	08 95       	ret
		}
		else
		CLR_BIT(DDRA,pinnumber);
  ce:	2a b3       	in	r18, 0x1a	; 26
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	ac 01       	movw	r20, r24
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
  d8:	44 0f       	add	r20, r20
  da:	55 1f       	adc	r21, r21
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
  e0:	ba 01       	movw	r22, r20
  e2:	60 95       	com	r22
  e4:	62 23       	and	r22, r18
  e6:	6a bb       	out	0x1a, r22	; 26
  e8:	08 95       	ret
	
	break;
	
	case'B':
	if (direction==1){
  ea:	41 30       	cpi	r20, 0x01	; 1
  ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
		SET_BIT(DDRB,pinnumber);
  ee:	27 b3       	in	r18, 0x17	; 23
  f0:	81 e0       	ldi	r24, 0x01	; 1
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	ac 01       	movw	r20, r24
  f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
  f8:	44 0f       	add	r20, r20
  fa:	55 1f       	adc	r21, r21
  fc:	6a 95       	dec	r22
  fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
 100:	ba 01       	movw	r22, r20
 102:	62 2b       	or	r22, r18
 104:	67 bb       	out	0x17, r22	; 23
 106:	08 95       	ret
	}
	else
	CLR_BIT(DDRB,pinnumber);
 108:	27 b3       	in	r18, 0x17	; 23
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
 112:	44 0f       	add	r20, r20
 114:	55 1f       	adc	r21, r21
 116:	6a 95       	dec	r22
 118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
 11a:	ba 01       	movw	r22, r20
 11c:	60 95       	com	r22
 11e:	62 23       	and	r22, r18
 120:	67 bb       	out	0x17, r22	; 23
 122:	08 95       	ret
   break;
 
   case'C':
    if (direction==1){
 124:	41 30       	cpi	r20, 0x01	; 1
 126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
	 SET_BIT(DDRC,pinnumber);
 128:	24 b3       	in	r18, 0x14	; 20
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	ac 01       	movw	r20, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
 132:	44 0f       	add	r20, r20
 134:	55 1f       	adc	r21, r21
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
 13a:	ba 01       	movw	r22, r20
 13c:	62 2b       	or	r22, r18
 13e:	64 bb       	out	0x14, r22	; 20
 140:	08 95       	ret
  }
   else
    CLR_BIT(DDRC,pinnumber);
 142:	24 b3       	in	r18, 0x14	; 20
 144:	81 e0       	ldi	r24, 0x01	; 1
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	ac 01       	movw	r20, r24
 14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
 14c:	44 0f       	add	r20, r20
 14e:	55 1f       	adc	r21, r21
 150:	6a 95       	dec	r22
 152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
 154:	ba 01       	movw	r22, r20
 156:	60 95       	com	r22
 158:	62 23       	and	r22, r18
 15a:	64 bb       	out	0x14, r22	; 20
 15c:	08 95       	ret
	break;
	
	case'D':
	if (direction==1){
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
		SET_BIT(DDRD,pinnumber);
 162:	21 b3       	in	r18, 0x11	; 17
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	ac 01       	movw	r20, r24
 16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
 16c:	44 0f       	add	r20, r20
 16e:	55 1f       	adc	r21, r21
 170:	6a 95       	dec	r22
 172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
 174:	ba 01       	movw	r22, r20
 176:	62 2b       	or	r22, r18
 178:	61 bb       	out	0x11, r22	; 17
 17a:	08 95       	ret
	}
	else
	CLR_BIT(DDRD,pinnumber);
 17c:	21 b3       	in	r18, 0x11	; 17
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	ac 01       	movw	r20, r24
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
 186:	44 0f       	add	r20, r20
 188:	55 1f       	adc	r21, r21
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
 18e:	ba 01       	movw	r22, r20
 190:	60 95       	com	r22
 192:	62 23       	and	r22, r18
 194:	61 bb       	out	0x11, r22	; 17
 196:	08 95       	ret

00000198 <DIO_write>:
}
}

void DIO_write (unsigned char portname,unsigned char pinnumber,unsigned char outputvalue){
	
	switch (portname){
 198:	82 34       	cpi	r24, 0x42	; 66
 19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
 19c:	83 34       	cpi	r24, 0x43	; 67
 19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
 1a0:	81 34       	cpi	r24, 0x41	; 65
 1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
 1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
 1a8:	83 34       	cpi	r24, 0x43	; 67
 1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
 1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
 1ae:	84 34       	cpi	r24, 0x44	; 68
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
 1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
 1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
		
		case'A':
		if (outputvalue==1){
 1b6:	41 30       	cpi	r20, 0x01	; 1
 1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
			SET_BIT(PORTA,pinnumber);
 1ba:	2b b3       	in	r18, 0x1b	; 27
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	90 e0       	ldi	r25, 0x00	; 0
 1c0:	ac 01       	movw	r20, r24
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
 1c4:	44 0f       	add	r20, r20
 1c6:	55 1f       	adc	r21, r21
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
 1cc:	ba 01       	movw	r22, r20
 1ce:	62 2b       	or	r22, r18
 1d0:	6b bb       	out	0x1b, r22	; 27
 1d2:	08 95       	ret
		}
		else
		CLR_BIT(PORTA,pinnumber);
 1d4:	2b b3       	in	r18, 0x1b	; 27
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	ac 01       	movw	r20, r24
 1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
 1de:	44 0f       	add	r20, r20
 1e0:	55 1f       	adc	r21, r21
 1e2:	6a 95       	dec	r22
 1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
 1e6:	ba 01       	movw	r22, r20
 1e8:	60 95       	com	r22
 1ea:	62 23       	and	r22, r18
 1ec:	6b bb       	out	0x1b, r22	; 27
 1ee:	08 95       	ret
		
		break;
		
		case'B':
		if (outputvalue==1){
 1f0:	41 30       	cpi	r20, 0x01	; 1
 1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
			SET_BIT(PORTB,pinnumber);
 1f4:	28 b3       	in	r18, 0x18	; 24
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	ac 01       	movw	r20, r24
 1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
 1fe:	44 0f       	add	r20, r20
 200:	55 1f       	adc	r21, r21
 202:	6a 95       	dec	r22
 204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
 206:	ba 01       	movw	r22, r20
 208:	62 2b       	or	r22, r18
 20a:	68 bb       	out	0x18, r22	; 24
 20c:	08 95       	ret
		}
		else
		CLR_BIT(PORTB,pinnumber);
 20e:	28 b3       	in	r18, 0x18	; 24
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	90 e0       	ldi	r25, 0x00	; 0
 214:	ac 01       	movw	r20, r24
 216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
 218:	44 0f       	add	r20, r20
 21a:	55 1f       	adc	r21, r21
 21c:	6a 95       	dec	r22
 21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
 220:	ba 01       	movw	r22, r20
 222:	60 95       	com	r22
 224:	62 23       	and	r22, r18
 226:	68 bb       	out	0x18, r22	; 24
 228:	08 95       	ret
		break;
		
		case'C':
		if (outputvalue==1){
 22a:	41 30       	cpi	r20, 0x01	; 1
 22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
			SET_BIT(PORTC,pinnumber);
 22e:	25 b3       	in	r18, 0x15	; 21
 230:	81 e0       	ldi	r24, 0x01	; 1
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	ac 01       	movw	r20, r24
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
 238:	44 0f       	add	r20, r20
 23a:	55 1f       	adc	r21, r21
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
 240:	ba 01       	movw	r22, r20
 242:	62 2b       	or	r22, r18
 244:	65 bb       	out	0x15, r22	; 21
 246:	08 95       	ret
		}
		else
		CLR_BIT(PORTC,pinnumber);
 248:	25 b3       	in	r18, 0x15	; 21
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	ac 01       	movw	r20, r24
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
 252:	44 0f       	add	r20, r20
 254:	55 1f       	adc	r21, r21
 256:	6a 95       	dec	r22
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
 25a:	ba 01       	movw	r22, r20
 25c:	60 95       	com	r22
 25e:	62 23       	and	r22, r18
 260:	65 bb       	out	0x15, r22	; 21
 262:	08 95       	ret
		break;
		
		case'D':
		if (outputvalue==1){
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
			SET_BIT(PORTD,pinnumber);
 268:	22 b3       	in	r18, 0x12	; 18
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	ac 01       	movw	r20, r24
 270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
 272:	44 0f       	add	r20, r20
 274:	55 1f       	adc	r21, r21
 276:	6a 95       	dec	r22
 278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
 27a:	ba 01       	movw	r22, r20
 27c:	62 2b       	or	r22, r18
 27e:	62 bb       	out	0x12, r22	; 18
 280:	08 95       	ret
		}
		else
		CLR_BIT(PORTD,pinnumber);
 282:	22 b3       	in	r18, 0x12	; 18
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	ac 01       	movw	r20, r24
 28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
 28c:	44 0f       	add	r20, r20
 28e:	55 1f       	adc	r21, r21
 290:	6a 95       	dec	r22
 292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
 294:	ba 01       	movw	r22, r20
 296:	60 95       	com	r22
 298:	62 23       	and	r22, r18
 29a:	62 bb       	out	0x12, r22	; 18
 29c:	08 95       	ret

0000029e <DIO_u8read>:
	}
}

unsigned char DIO_u8read (unsigned char portname,unsigned char pinnumber){
	unsigned char return_value = 0;
	switch(portname){
 29e:	82 34       	cpi	r24, 0x42	; 66
 2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_u8read+0x40>
 2a2:	83 34       	cpi	r24, 0x43	; 67
 2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
 2a6:	81 34       	cpi	r24, 0x41	; 65
 2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
 2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_u8read+0xac>
 2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
 2ae:	83 34       	cpi	r24, 0x43	; 67
 2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_u8read+0x64>
 2b2:	84 34       	cpi	r24, 0x44	; 68
 2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
 2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_u8read+0xac>
 2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_u8read+0x88>
		
		case'A':
		return_value = READ_BIT(PINA,pinnumber);
 2ba:	29 b3       	in	r18, 0x19	; 25
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	90 e0       	ldi	r25, 0x00	; 0
 2c0:	06 2e       	mov	r0, r22
 2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
 2c4:	88 0f       	add	r24, r24
 2c6:	99 1f       	adc	r25, r25
 2c8:	0a 94       	dec	r0
 2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	82 23       	and	r24, r18
 2d0:	93 23       	and	r25, r19
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
 2d4:	95 95       	asr	r25
 2d6:	87 95       	ror	r24
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
		break;
 2dc:	08 95       	ret
		case'B':
		return_value = READ_BIT(PINB,pinnumber);
 2de:	26 b3       	in	r18, 0x16	; 22
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	90 e0       	ldi	r25, 0x00	; 0
 2e4:	06 2e       	mov	r0, r22
 2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x4e>
 2e8:	88 0f       	add	r24, r24
 2ea:	99 1f       	adc	r25, r25
 2ec:	0a 94       	dec	r0
 2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x4a>
 2f0:	30 e0       	ldi	r19, 0x00	; 0
 2f2:	82 23       	and	r24, r18
 2f4:	93 23       	and	r25, r19
 2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x5e>
 2f8:	95 95       	asr	r25
 2fa:	87 95       	ror	r24
 2fc:	6a 95       	dec	r22
 2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x5a>
		break;
 300:	08 95       	ret
		case'C':
		return_value = READ_BIT(PINC,pinnumber);
 302:	23 b3       	in	r18, 0x13	; 19
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	06 2e       	mov	r0, r22
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x72>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x6e>
 314:	30 e0       	ldi	r19, 0x00	; 0
 316:	82 23       	and	r24, r18
 318:	93 23       	and	r25, r19
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x82>
 31c:	95 95       	asr	r25
 31e:	87 95       	ror	r24
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x7e>
		break;
 324:	08 95       	ret
		case'D':
		return_value = READ_BIT(PIND,pinnumber);
 326:	20 b3       	in	r18, 0x10	; 16
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	06 2e       	mov	r0, r22
 32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x96>
 330:	88 0f       	add	r24, r24
 332:	99 1f       	adc	r25, r25
 334:	0a 94       	dec	r0
 336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x92>
 338:	30 e0       	ldi	r19, 0x00	; 0
 33a:	82 23       	and	r24, r18
 33c:	93 23       	and	r25, r19
 33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0xa6>
 340:	95 95       	asr	r25
 342:	87 95       	ror	r24
 344:	6a 95       	dec	r22
 346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0xa2>
		break;
 348:	08 95       	ret
		break;
	}
}

unsigned char DIO_u8read (unsigned char portname,unsigned char pinnumber){
	unsigned char return_value = 0;
 34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_value;
}
 34c:	08 95       	ret

0000034e <DIO_toggle>:

void DIO_toggle (unsigned char portname,unsigned char pinnumber){
	switch(portname){
 34e:	82 34       	cpi	r24, 0x42	; 66
 350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
 352:	83 34       	cpi	r24, 0x43	; 67
 354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
 356:	81 34       	cpi	r24, 0x41	; 65
 358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
 35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
 35c:	83 34       	cpi	r24, 0x43	; 67
 35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
 360:	84 34       	cpi	r24, 0x44	; 68
 362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
 364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
		case'A':
		TOG_BIT(PORTA,pinnumber);
 366:	2b b3       	in	r18, 0x1b	; 27
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	ac 01       	movw	r20, r24
 36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
 370:	44 0f       	add	r20, r20
 372:	55 1f       	adc	r21, r21
 374:	6a 95       	dec	r22
 376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
 378:	ba 01       	movw	r22, r20
 37a:	62 27       	eor	r22, r18
 37c:	6b bb       	out	0x1b, r22	; 27
		break;
 37e:	08 95       	ret
		case'B':
		TOG_BIT(PORTB,pinnumber);
 380:	28 b3       	in	r18, 0x18	; 24
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	ac 01       	movw	r20, r24
 388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
 38a:	44 0f       	add	r20, r20
 38c:	55 1f       	adc	r21, r21
 38e:	6a 95       	dec	r22
 390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
 392:	ba 01       	movw	r22, r20
 394:	62 27       	eor	r22, r18
 396:	68 bb       	out	0x18, r22	; 24
		break;
 398:	08 95       	ret
		case'C':
		TOG_BIT(PORTC,pinnumber);
 39a:	25 b3       	in	r18, 0x15	; 21
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	ac 01       	movw	r20, r24
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
 3a4:	44 0f       	add	r20, r20
 3a6:	55 1f       	adc	r21, r21
 3a8:	6a 95       	dec	r22
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
 3ac:	ba 01       	movw	r22, r20
 3ae:	62 27       	eor	r22, r18
 3b0:	65 bb       	out	0x15, r22	; 21
		break;
 3b2:	08 95       	ret
		case'D':
		TOG_BIT(PORTD,pinnumber);
 3b4:	22 b3       	in	r18, 0x12	; 18
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	ac 01       	movw	r20, r24
 3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
 3be:	44 0f       	add	r20, r20
 3c0:	55 1f       	adc	r21, r21
 3c2:	6a 95       	dec	r22
 3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
 3c6:	ba 01       	movw	r22, r20
 3c8:	62 27       	eor	r22, r18
 3ca:	62 bb       	out	0x12, r22	; 18
 3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		break;
	}
}

void DIO_set_port_direction (unsigned char portname,unsigned char direction){
	switch(portname){
 3ce:	82 34       	cpi	r24, 0x42	; 66
 3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
 3d2:	83 34       	cpi	r24, 0x43	; 67
 3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
 3d6:	81 34       	cpi	r24, 0x41	; 65
 3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
 3dc:	83 34       	cpi	r24, 0x43	; 67
 3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
 3e0:	84 34       	cpi	r24, 0x44	; 68
 3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
 3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
		case'A':
		DDRA=direction;
 3e6:	6a bb       	out	0x1a, r22	; 26
		break;
 3e8:	08 95       	ret
		case'B':
		DDRB=direction;
 3ea:	67 bb       	out	0x17, r22	; 23
		break;
 3ec:	08 95       	ret
		case'C':
		DDRC=direction;
 3ee:	64 bb       	out	0x14, r22	; 20
		break;
 3f0:	08 95       	ret
		case'D':
		DDRD=direction;
 3f2:	61 bb       	out	0x11, r22	; 17
 3f4:	08 95       	ret

000003f6 <DIO_write_port>:
		break;
	}		
}

void DIO_write_port (unsigned char portname,unsigned char portvalue){
	switch(portname){
 3f6:	82 34       	cpi	r24, 0x42	; 66
 3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
 3fa:	83 34       	cpi	r24, 0x43	; 67
 3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
 3fe:	81 34       	cpi	r24, 0x41	; 65
 400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
 402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
 404:	83 34       	cpi	r24, 0x43	; 67
 406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
 408:	84 34       	cpi	r24, 0x44	; 68
 40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
 40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
		case'A':
		PORTA=portvalue;
 40e:	6b bb       	out	0x1b, r22	; 27
		break;
 410:	08 95       	ret
		case'B':
		PORTB=portvalue;
 412:	68 bb       	out	0x18, r22	; 24
		break;
 414:	08 95       	ret
		case'C':
		PORTC=portvalue;
 416:	65 bb       	out	0x15, r22	; 21
		break;
 418:	08 95       	ret
		case'D':
		PORTD=portvalue;
 41a:	62 bb       	out	0x12, r22	; 18
 41c:	08 95       	ret

0000041e <DIO_read_port>:
	}
}

unsigned char DIO_read_port (unsigned char portname){
	unsigned char return_val=0;
	switch(portname){
 41e:	82 34       	cpi	r24, 0x42	; 66
 420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
 422:	83 34       	cpi	r24, 0x43	; 67
 424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
 426:	81 34       	cpi	r24, 0x41	; 65
 428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
 42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
 42c:	83 34       	cpi	r24, 0x43	; 67
 42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
 430:	84 34       	cpi	r24, 0x44	; 68
 432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
 434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
		case'A':
		return_val=PINA;
 436:	89 b3       	in	r24, 0x19	; 25
		break;
 438:	08 95       	ret
		case'B':
		return_val=PINB;
 43a:	86 b3       	in	r24, 0x16	; 22
		break;
 43c:	08 95       	ret
		case'C':
		return_val=PINC;
 43e:	83 b3       	in	r24, 0x13	; 19
		break;
 440:	08 95       	ret
		case'D':
		return_val=PIND;
 442:	80 b3       	in	r24, 0x10	; 16
		break;
 444:	08 95       	ret
		break;
	}
}

unsigned char DIO_read_port (unsigned char portname){
	unsigned char return_val=0;
 446:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default:
		break;
	}
	return return_val;
}
 448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup (char portname,char pinnumber,char connect_pullup){
	switch(portname){
 44a:	82 34       	cpi	r24, 0x42	; 66
 44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
 44e:	83 34       	cpi	r24, 0x43	; 67
 450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
 452:	81 34       	cpi	r24, 0x41	; 65
 454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
 456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
 458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
 45a:	83 34       	cpi	r24, 0x43	; 67
 45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
 45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
 460:	84 34       	cpi	r24, 0x44	; 68
 462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
 464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
 466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
		case'A':
		if (connect_pullup==1){
 468:	41 30       	cpi	r20, 0x01	; 1
 46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
			SET_BIT(PORTA,pinnumber);
 46c:	2b b3       	in	r18, 0x1b	; 27
 46e:	81 e0       	ldi	r24, 0x01	; 1
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	ac 01       	movw	r20, r24
 474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
 47a:	6a 95       	dec	r22
 47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
 47e:	ba 01       	movw	r22, r20
 480:	62 2b       	or	r22, r18
 482:	6b bb       	out	0x1b, r22	; 27
 484:	08 95       	ret
		}
		else{
			CLR_BIT(PORTA,pinnumber);
 486:	2b b3       	in	r18, 0x1b	; 27
 488:	81 e0       	ldi	r24, 0x01	; 1
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	ac 01       	movw	r20, r24
 48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
 490:	44 0f       	add	r20, r20
 492:	55 1f       	adc	r21, r21
 494:	6a 95       	dec	r22
 496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
 498:	ba 01       	movw	r22, r20
 49a:	60 95       	com	r22
 49c:	62 23       	and	r22, r18
 49e:	6b bb       	out	0x1b, r22	; 27
 4a0:	08 95       	ret
      }
	  break;
	  case'B':
	  if (connect_pullup==1){
 4a2:	41 30       	cpi	r20, 0x01	; 1
 4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		  SET_BIT(PORTB,pinnumber);
 4a6:	28 b3       	in	r18, 0x18	; 24
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	ac 01       	movw	r20, r24
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
 4b0:	44 0f       	add	r20, r20
 4b2:	55 1f       	adc	r21, r21
 4b4:	6a 95       	dec	r22
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
 4b8:	ba 01       	movw	r22, r20
 4ba:	62 2b       	or	r22, r18
 4bc:	68 bb       	out	0x18, r22	; 24
 4be:	08 95       	ret
	  }
	  else{
		  CLR_BIT(PORTB,pinnumber);
 4c0:	28 b3       	in	r18, 0x18	; 24
 4c2:	81 e0       	ldi	r24, 0x01	; 1
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	ac 01       	movw	r20, r24
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
 4ca:	44 0f       	add	r20, r20
 4cc:	55 1f       	adc	r21, r21
 4ce:	6a 95       	dec	r22
 4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
 4d2:	ba 01       	movw	r22, r20
 4d4:	60 95       	com	r22
 4d6:	62 23       	and	r22, r18
 4d8:	68 bb       	out	0x18, r22	; 24
 4da:	08 95       	ret
	  }
	  break;
	  case'C':
	  if (connect_pullup==1){
 4dc:	41 30       	cpi	r20, 0x01	; 1
 4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		  SET_BIT(PORTC,pinnumber);
 4e0:	25 b3       	in	r18, 0x15	; 21
 4e2:	81 e0       	ldi	r24, 0x01	; 1
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ac 01       	movw	r20, r24
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
 4ea:	44 0f       	add	r20, r20
 4ec:	55 1f       	adc	r21, r21
 4ee:	6a 95       	dec	r22
 4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
 4f2:	ba 01       	movw	r22, r20
 4f4:	62 2b       	or	r22, r18
 4f6:	65 bb       	out	0x15, r22	; 21
 4f8:	08 95       	ret
	  }
	  else{
		  CLR_BIT(PORTC,pinnumber);
 4fa:	25 b3       	in	r18, 0x15	; 21
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	ac 01       	movw	r20, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
 504:	44 0f       	add	r20, r20
 506:	55 1f       	adc	r21, r21
 508:	6a 95       	dec	r22
 50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
 50c:	ba 01       	movw	r22, r20
 50e:	60 95       	com	r22
 510:	62 23       	and	r22, r18
 512:	65 bb       	out	0x15, r22	; 21
 514:	08 95       	ret
	  }
	  break;
	  case'D':
	  if (connect_pullup==1){
 516:	41 30       	cpi	r20, 0x01	; 1
 518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		  SET_BIT(PORTD,pinnumber);
 51a:	22 b3       	in	r18, 0x12	; 18
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	ac 01       	movw	r20, r24
 522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
 524:	44 0f       	add	r20, r20
 526:	55 1f       	adc	r21, r21
 528:	6a 95       	dec	r22
 52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
 52c:	ba 01       	movw	r22, r20
 52e:	62 2b       	or	r22, r18
 530:	62 bb       	out	0x12, r22	; 18
 532:	08 95       	ret
	  }
	  else{
		  CLR_BIT(PORTD,pinnumber);
 534:	22 b3       	in	r18, 0x12	; 18
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	ac 01       	movw	r20, r24
 53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
 53e:	44 0f       	add	r20, r20
 540:	55 1f       	adc	r21, r21
 542:	6a 95       	dec	r22
 544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
 546:	ba 01       	movw	r22, r20
 548:	60 95       	com	r22
 54a:	62 23       	and	r22, r18
 54c:	62 bb       	out	0x12, r22	; 18
 54e:	08 95       	ret

00000550 <write_low_nibble>:
	  break;
	}
}

void write_low_nibble (unsigned char portname,unsigned char  val){
	val&=0x0f;
 550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname){
 552:	82 34       	cpi	r24, 0x42	; 66
 554:	89 f0       	breq	.+34     	; 0x578 <write_low_nibble+0x28>
 556:	83 34       	cpi	r24, 0x43	; 67
 558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
 55a:	81 34       	cpi	r24, 0x41	; 65
 55c:	09 f5       	brne	.+66     	; 0x5a0 <write_low_nibble+0x50>
 55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
 560:	83 34       	cpi	r24, 0x43	; 67
 562:	89 f0       	breq	.+34     	; 0x586 <write_low_nibble+0x36>
 564:	84 34       	cpi	r24, 0x44	; 68
 566:	e1 f4       	brne	.+56     	; 0x5a0 <write_low_nibble+0x50>
 568:	15 c0       	rjmp	.+42     	; 0x594 <write_low_nibble+0x44>
		case'A':
		PORTA&=0xf0;
 56a:	8b b3       	in	r24, 0x1b	; 27
 56c:	80 7f       	andi	r24, 0xF0	; 240
 56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val;
 570:	8b b3       	in	r24, 0x1b	; 27
 572:	68 2b       	or	r22, r24
 574:	6b bb       	out	0x1b, r22	; 27
		break;
 576:	08 95       	ret
		case'B':
		PORTB&=0xf0;
 578:	88 b3       	in	r24, 0x18	; 24
 57a:	80 7f       	andi	r24, 0xF0	; 240
 57c:	88 bb       	out	0x18, r24	; 24
		PORTB|=val;
 57e:	88 b3       	in	r24, 0x18	; 24
 580:	68 2b       	or	r22, r24
 582:	68 bb       	out	0x18, r22	; 24
		break;
 584:	08 95       	ret
		case'C':
		PORTC&=0xf0;
 586:	85 b3       	in	r24, 0x15	; 21
 588:	80 7f       	andi	r24, 0xF0	; 240
 58a:	85 bb       	out	0x15, r24	; 21
		PORTC|=val;
 58c:	85 b3       	in	r24, 0x15	; 21
 58e:	68 2b       	or	r22, r24
 590:	65 bb       	out	0x15, r22	; 21
		break;
 592:	08 95       	ret
		case'D':
		PORTD&=0xf0;
 594:	82 b3       	in	r24, 0x12	; 18
 596:	80 7f       	andi	r24, 0xF0	; 240
 598:	82 bb       	out	0x12, r24	; 18
		PORTD|=val;
 59a:	82 b3       	in	r24, 0x12	; 18
 59c:	68 2b       	or	r22, r24
 59e:	62 bb       	out	0x12, r22	; 18
 5a0:	08 95       	ret

000005a2 <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char val1)
{
	val1<<=4;
 5a2:	62 95       	swap	r22
 5a4:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
 5a6:	82 34       	cpi	r24, 0x42	; 66
 5a8:	89 f0       	breq	.+34     	; 0x5cc <write_high_nibble+0x2a>
 5aa:	83 34       	cpi	r24, 0x43	; 67
 5ac:	18 f4       	brcc	.+6      	; 0x5b4 <write_high_nibble+0x12>
 5ae:	81 34       	cpi	r24, 0x41	; 65
 5b0:	09 f5       	brne	.+66     	; 0x5f4 <write_high_nibble+0x52>
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <write_high_nibble+0x1c>
 5b4:	83 34       	cpi	r24, 0x43	; 67
 5b6:	89 f0       	breq	.+34     	; 0x5da <write_high_nibble+0x38>
 5b8:	84 34       	cpi	r24, 0x44	; 68
 5ba:	e1 f4       	brne	.+56     	; 0x5f4 <write_high_nibble+0x52>
 5bc:	15 c0       	rjmp	.+42     	; 0x5e8 <write_high_nibble+0x46>
	{
		case 'A':
		PORTA&=0x0f;
 5be:	8b b3       	in	r24, 0x1b	; 27
 5c0:	8f 70       	andi	r24, 0x0F	; 15
 5c2:	8b bb       	out	0x1b, r24	; 27
		PORTA|=val1;
 5c4:	8b b3       	in	r24, 0x1b	; 27
 5c6:	68 2b       	or	r22, r24
 5c8:	6b bb       	out	0x1b, r22	; 27
		break;
 5ca:	08 95       	ret
		case 'B':
		PORTB&=0x0f;
 5cc:	88 b3       	in	r24, 0x18	; 24
 5ce:	8f 70       	andi	r24, 0x0F	; 15
 5d0:	88 bb       	out	0x18, r24	; 24
		PORTB|=val1;
 5d2:	88 b3       	in	r24, 0x18	; 24
 5d4:	68 2b       	or	r22, r24
 5d6:	68 bb       	out	0x18, r22	; 24
		break;
 5d8:	08 95       	ret
		case 'C':
		PORTC&=0x0f;
 5da:	85 b3       	in	r24, 0x15	; 21
 5dc:	8f 70       	andi	r24, 0x0F	; 15
 5de:	85 bb       	out	0x15, r24	; 21
		PORTC|=val1;
 5e0:	85 b3       	in	r24, 0x15	; 21
 5e2:	68 2b       	or	r22, r24
 5e4:	65 bb       	out	0x15, r22	; 21
		break;
 5e6:	08 95       	ret
		case 'D':
		PORTD&=0x0f;
 5e8:	82 b3       	in	r24, 0x12	; 18
 5ea:	8f 70       	andi	r24, 0x0F	; 15
 5ec:	82 bb       	out	0x12, r24	; 18
		PORTD|=val1;
 5ee:	82 b3       	in	r24, 0x12	; 18
 5f0:	68 2b       	or	r22, r24
 5f2:	62 bb       	out	0x12, r22	; 18
 5f4:	08 95       	ret

000005f6 <keypad_vInit>:

#include "Keypad_Driver.h"

void keypad_vInit (void){
	
	DIO_vsetPINDir('D',0,1);
 5f6:	84 e4       	ldi	r24, 0x44	; 68
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	60 e0       	ldi	r22, 0x00	; 0
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	41 e0       	ldi	r20, 0x01	; 1
 600:	50 e0       	ldi	r21, 0x00	; 0
 602:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',1,1);
 606:	84 e4       	ldi	r24, 0x44	; 68
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	61 e0       	ldi	r22, 0x01	; 1
 60c:	70 e0       	ldi	r23, 0x00	; 0
 60e:	41 e0       	ldi	r20, 0x01	; 1
 610:	50 e0       	ldi	r21, 0x00	; 0
 612:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',2,1);
 616:	84 e4       	ldi	r24, 0x44	; 68
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	62 e0       	ldi	r22, 0x02	; 2
 61c:	70 e0       	ldi	r23, 0x00	; 0
 61e:	41 e0       	ldi	r20, 0x01	; 1
 620:	50 e0       	ldi	r21, 0x00	; 0
 622:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',3,1);
 626:	84 e4       	ldi	r24, 0x44	; 68
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	63 e0       	ldi	r22, 0x03	; 3
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	41 e0       	ldi	r20, 0x01	; 1
 630:	50 e0       	ldi	r21, 0x00	; 0
 632:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',4,0);
 636:	84 e4       	ldi	r24, 0x44	; 68
 638:	90 e0       	ldi	r25, 0x00	; 0
 63a:	64 e0       	ldi	r22, 0x04	; 4
 63c:	70 e0       	ldi	r23, 0x00	; 0
 63e:	40 e0       	ldi	r20, 0x00	; 0
 640:	50 e0       	ldi	r21, 0x00	; 0
 642:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',5,0);
 646:	84 e4       	ldi	r24, 0x44	; 68
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	65 e0       	ldi	r22, 0x05	; 5
 64c:	70 e0       	ldi	r23, 0x00	; 0
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',6,0);
 656:	84 e4       	ldi	r24, 0x44	; 68
 658:	90 e0       	ldi	r25, 0x00	; 0
 65a:	66 e0       	ldi	r22, 0x06	; 6
 65c:	70 e0       	ldi	r23, 0x00	; 0
 65e:	40 e0       	ldi	r20, 0x00	; 0
 660:	50 e0       	ldi	r21, 0x00	; 0
 662:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('D',7,0);
 666:	84 e4       	ldi	r24, 0x44	; 68
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	67 e0       	ldi	r22, 0x07	; 7
 66c:	70 e0       	ldi	r23, 0x00	; 0
 66e:	40 e0       	ldi	r20, 0x00	; 0
 670:	50 e0       	ldi	r21, 0x00	; 0
 672:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vconnectpullup('D',4,1);
 676:	84 e4       	ldi	r24, 0x44	; 68
 678:	90 e0       	ldi	r25, 0x00	; 0
 67a:	64 e0       	ldi	r22, 0x04	; 4
 67c:	70 e0       	ldi	r23, 0x00	; 0
 67e:	41 e0       	ldi	r20, 0x01	; 1
 680:	50 e0       	ldi	r21, 0x00	; 0
 682:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup('D',5,1);
 686:	84 e4       	ldi	r24, 0x44	; 68
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	65 e0       	ldi	r22, 0x05	; 5
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	41 e0       	ldi	r20, 0x01	; 1
 690:	50 e0       	ldi	r21, 0x00	; 0
 692:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup('D',6,1);
 696:	84 e4       	ldi	r24, 0x44	; 68
 698:	90 e0       	ldi	r25, 0x00	; 0
 69a:	66 e0       	ldi	r22, 0x06	; 6
 69c:	70 e0       	ldi	r23, 0x00	; 0
 69e:	41 e0       	ldi	r20, 0x01	; 1
 6a0:	50 e0       	ldi	r21, 0x00	; 0
 6a2:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	DIO_vconnectpullup('D',7,1);
 6a6:	84 e4       	ldi	r24, 0x44	; 68
 6a8:	90 e0       	ldi	r25, 0x00	; 0
 6aa:	67 e0       	ldi	r22, 0x07	; 7
 6ac:	70 e0       	ldi	r23, 0x00	; 0
 6ae:	41 e0       	ldi	r20, 0x01	; 1
 6b0:	50 e0       	ldi	r21, 0x00	; 0
 6b2:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>

}
 6b6:	08 95       	ret

000006b8 <keypad_u8Read>:

unsigned char keypad_u8Read (void){
 6b8:	af 92       	push	r10
 6ba:	bf 92       	push	r11
 6bc:	cf 92       	push	r12
 6be:	df 92       	push	r13
 6c0:	ef 92       	push	r14
 6c2:	ff 92       	push	r15
 6c4:	0f 93       	push	r16
 6c6:	1f 93       	push	r17
 6c8:	cf 93       	push	r28
 6ca:	df 93       	push	r29
 6cc:	cd b7       	in	r28, 0x3d	; 61
 6ce:	de b7       	in	r29, 0x3e	; 62
 6d0:	60 97       	sbiw	r28, 0x10	; 16
 6d2:	0f b6       	in	r0, 0x3f	; 63
 6d4:	f8 94       	cli
 6d6:	de bf       	out	0x3e, r29	; 62
 6d8:	0f be       	out	0x3f, r0	; 63
 6da:	cd bf       	out	0x3d, r28	; 61
	unsigned char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
 6dc:	de 01       	movw	r26, r28
 6de:	11 96       	adiw	r26, 0x01	; 1
 6e0:	e0 e6       	ldi	r30, 0x60	; 96
 6e2:	f0 e0       	ldi	r31, 0x00	; 0
 6e4:	80 e1       	ldi	r24, 0x10	; 16
 6e6:	01 90       	ld	r0, Z+
 6e8:	0d 92       	st	X+, r0
 6ea:	81 50       	subi	r24, 0x01	; 1
 6ec:	e1 f7       	brne	.-8      	; 0x6e6 <keypad_u8Read+0x2e>
 6ee:	ee 24       	eor	r14, r14
 6f0:	ff 24       	eor	r15, r15
		char x,row,col,return_val= NOTPRESSED;
		for(row=0;row<4;row++){
			DIO_write('D',0,1);
 6f2:	84 e4       	ldi	r24, 0x44	; 68
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	60 e0       	ldi	r22, 0x00	; 0
 6f8:	70 e0       	ldi	r23, 0x00	; 0
 6fa:	41 e0       	ldi	r20, 0x01	; 1
 6fc:	50 e0       	ldi	r21, 0x00	; 0
 6fe:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			DIO_write('D',1,1);
 702:	84 e4       	ldi	r24, 0x44	; 68
 704:	90 e0       	ldi	r25, 0x00	; 0
 706:	61 e0       	ldi	r22, 0x01	; 1
 708:	70 e0       	ldi	r23, 0x00	; 0
 70a:	41 e0       	ldi	r20, 0x01	; 1
 70c:	50 e0       	ldi	r21, 0x00	; 0
 70e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			DIO_write('D',2,1);
 712:	84 e4       	ldi	r24, 0x44	; 68
 714:	90 e0       	ldi	r25, 0x00	; 0
 716:	62 e0       	ldi	r22, 0x02	; 2
 718:	70 e0       	ldi	r23, 0x00	; 0
 71a:	41 e0       	ldi	r20, 0x01	; 1
 71c:	50 e0       	ldi	r21, 0x00	; 0
 71e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			DIO_write('D',3,1);
 722:	84 e4       	ldi	r24, 0x44	; 68
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	63 e0       	ldi	r22, 0x03	; 3
 728:	70 e0       	ldi	r23, 0x00	; 0
 72a:	41 e0       	ldi	r20, 0x01	; 1
 72c:	50 e0       	ldi	r21, 0x00	; 0
 72e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
			DIO_write('D',row,0);
 732:	57 01       	movw	r10, r14
 734:	84 e4       	ldi	r24, 0x44	; 68
 736:	90 e0       	ldi	r25, 0x00	; 0
 738:	b7 01       	movw	r22, r14
 73a:	40 e0       	ldi	r20, 0x00	; 0
 73c:	50 e0       	ldi	r21, 0x00	; 0
 73e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 742:	00 e0       	ldi	r16, 0x00	; 0
 744:	10 e0       	ldi	r17, 0x00	; 0
			
			for (col=0;col<4;col++){
				x = DIO_u8read('D',(col+4));
 746:	68 01       	movw	r12, r16
	DIO_vconnectpullup('D',6,1);
	DIO_vconnectpullup('D',7,1);

}

unsigned char keypad_u8Read (void){
 748:	b8 01       	movw	r22, r16
 74a:	6c 5f       	subi	r22, 0xFC	; 252
 74c:	7f 4f       	sbci	r23, 0xFF	; 255
			DIO_write('D',2,1);
			DIO_write('D',3,1);
			DIO_write('D',row,0);
			
			for (col=0;col<4;col++){
				x = DIO_u8read('D',(col+4));
 74e:	84 e4       	ldi	r24, 0x44	; 68
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8read>
				if(x==0){
 756:	88 23       	and	r24, r24
 758:	61 f4       	brne	.+24     	; 0x772 <keypad_u8Read+0xba>
					return_val = arr[row][col];
 75a:	f5 01       	movw	r30, r10
 75c:	ee 0f       	add	r30, r30
 75e:	ff 1f       	adc	r31, r31
 760:	ee 0f       	add	r30, r30
 762:	ff 1f       	adc	r31, r31
 764:	ce 0e       	add	r12, r30
 766:	df 1e       	adc	r13, r31
 768:	fe 01       	movw	r30, r28
 76a:	ec 0d       	add	r30, r12
 76c:	fd 1d       	adc	r31, r13
 76e:	81 81       	ldd	r24, Z+1	; 0x01
 770:	06 c0       	rjmp	.+12     	; 0x77e <keypad_u8Read+0xc6>
 772:	0f 5f       	subi	r16, 0xFF	; 255
 774:	1f 4f       	sbci	r17, 0xFF	; 255
			DIO_write('D',1,1);
			DIO_write('D',2,1);
			DIO_write('D',3,1);
			DIO_write('D',row,0);
			
			for (col=0;col<4;col++){
 776:	04 30       	cpi	r16, 0x04	; 4
 778:	11 05       	cpc	r17, r1
 77a:	29 f7       	brne	.-54     	; 0x746 <keypad_u8Read+0x8e>
 77c:	11 c0       	rjmp	.+34     	; 0x7a0 <keypad_u8Read+0xe8>
		if (x==0){
			break;
		}
			}				
		return return_val;
 77e:	60 96       	adiw	r28, 0x10	; 16
 780:	0f b6       	in	r0, 0x3f	; 63
 782:	f8 94       	cli
 784:	de bf       	out	0x3e, r29	; 62
 786:	0f be       	out	0x3f, r0	; 63
 788:	cd bf       	out	0x3d, r28	; 61
 78a:	df 91       	pop	r29
 78c:	cf 91       	pop	r28
 78e:	1f 91       	pop	r17
 790:	0f 91       	pop	r16
 792:	ff 90       	pop	r15
 794:	ef 90       	pop	r14
 796:	df 90       	pop	r13
 798:	cf 90       	pop	r12
 79a:	bf 90       	pop	r11
 79c:	af 90       	pop	r10
 79e:	08 95       	ret
			}				
		if (x==0){
			break;
		}
			}				
		return return_val;
 7a0:	08 94       	sec
 7a2:	e1 1c       	adc	r14, r1
 7a4:	f1 1c       	adc	r15, r1
}

unsigned char keypad_u8Read (void){
	unsigned char arr[4][4] = {{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
		char x,row,col,return_val= NOTPRESSED;
		for(row=0;row<4;row++){
 7a6:	84 e0       	ldi	r24, 0x04	; 4
 7a8:	e8 16       	cp	r14, r24
 7aa:	f1 04       	cpc	r15, r1
 7ac:	09 f0       	breq	.+2      	; 0x7b0 <keypad_u8Read+0xf8>
 7ae:	a1 cf       	rjmp	.-190    	; 0x6f2 <keypad_u8Read+0x3a>
 7b0:	8f ef       	ldi	r24, 0xFF	; 255
 7b2:	e5 cf       	rjmp	.-54     	; 0x77e <keypad_u8Read+0xc6>

000007b4 <enable>:
	_delay_ms(1);
	#endif
}

static void enable(void){
	DIO_write(port_EN,EN,1);
 7b4:	81 e4       	ldi	r24, 0x41	; 65
 7b6:	60 e0       	ldi	r22, 0x00	; 0
 7b8:	41 e0       	ldi	r20, 0x01	; 1
 7ba:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7be:	8f e9       	ldi	r24, 0x9F	; 159
 7c0:	9f e0       	ldi	r25, 0x0F	; 15
 7c2:	01 97       	sbiw	r24, 0x01	; 1
 7c4:	f1 f7       	brne	.-4      	; 0x7c2 <enable+0xe>
 7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <enable+0x14>
 7c8:	00 00       	nop
	_delay_ms(2);
	DIO_write(port_EN,EN,0);
 7ca:	81 e4       	ldi	r24, 0x41	; 65
 7cc:	60 e0       	ldi	r22, 0x00	; 0
 7ce:	40 e0       	ldi	r20, 0x00	; 0
 7d0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
 7d4:	8f e9       	ldi	r24, 0x9F	; 159
 7d6:	9f e0       	ldi	r25, 0x0F	; 15
 7d8:	01 97       	sbiw	r24, 0x01	; 1
 7da:	f1 f7       	brne	.-4      	; 0x7d8 <enable+0x24>
 7dc:	00 c0       	rjmp	.+0      	; 0x7de <enable+0x2a>
 7de:	00 00       	nop
	_delay_ms(2);
}
 7e0:	08 95       	ret

000007e2 <LCD_vSend_cmd>:

void LCD_vSend_cmd (char port,char cmd){
 7e2:	cf 93       	push	r28
 7e4:	df 93       	push	r29
 7e6:	d8 2f       	mov	r29, r24
 7e8:	c6 2f       	mov	r28, r22
	DIO_write_port(port,cmd);
	DIO_write(port_RS,RS,0);
	enable();
	
	#elif defined four_bits_mode
	write_high_nibble(port,cmd>>4);
 7ea:	62 95       	swap	r22
 7ec:	6f 70       	andi	r22, 0x0F	; 15
 7ee:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <write_high_nibble>
	DIO_write(port_RS,RS,0);
 7f2:	81 e4       	ldi	r24, 0x41	; 65
 7f4:	62 e0       	ldi	r22, 0x02	; 2
 7f6:	40 e0       	ldi	r20, 0x00	; 0
 7f8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 7fc:	0e 94 da 03 	call	0x7b4	; 0x7b4 <enable>
	write_high_nibble(port,cmd);
 800:	8d 2f       	mov	r24, r29
 802:	6c 2f       	mov	r22, r28
 804:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <write_high_nibble>
	DIO_write(port_RS,RS,0);
 808:	81 e4       	ldi	r24, 0x41	; 65
 80a:	62 e0       	ldi	r22, 0x02	; 2
 80c:	40 e0       	ldi	r20, 0x00	; 0
 80e:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 812:	0e 94 da 03 	call	0x7b4	; 0x7b4 <enable>
 816:	8f ec       	ldi	r24, 0xCF	; 207
 818:	97 e0       	ldi	r25, 0x07	; 7
 81a:	01 97       	sbiw	r24, 0x01	; 1
 81c:	f1 f7       	brne	.-4      	; 0x81a <LCD_vSend_cmd+0x38>
 81e:	00 c0       	rjmp	.+0      	; 0x820 <LCD_vSend_cmd+0x3e>
 820:	00 00       	nop
	#endif
	_delay_ms(1);
}
 822:	df 91       	pop	r29
 824:	cf 91       	pop	r28
 826:	08 95       	ret

00000828 <LCD_vInit>:
#include "lcd1.h"
#define  F_CPU 8000000UL
#include <util/delay.h>


void LCD_vInit (char port){
 828:	cf 93       	push	r28
 82a:	c8 2f       	mov	r28, r24
 82c:	8f ef       	ldi	r24, 0xFF	; 255
 82e:	91 ee       	ldi	r25, 0xE1	; 225
 830:	a4 e0       	ldi	r26, 0x04	; 4
 832:	81 50       	subi	r24, 0x01	; 1
 834:	90 40       	sbci	r25, 0x00	; 0
 836:	a0 40       	sbci	r26, 0x00	; 0
 838:	e1 f7       	brne	.-8      	; 0x832 <LCD_vInit+0xa>
 83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_vInit+0x14>
 83c:	00 00       	nop
	_delay_ms(10);	
	LCD_vSend_cmd(port,ENTRY_MODE);
	_delay_ms(1);
	
	#elif defined four_bits_mode
	DIO_vsetPINDir(port,4,1);
 83e:	8c 2f       	mov	r24, r28
 840:	64 e0       	ldi	r22, 0x04	; 4
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,5,1);
 848:	8c 2f       	mov	r24, r28
 84a:	65 e0       	ldi	r22, 0x05	; 5
 84c:	41 e0       	ldi	r20, 0x01	; 1
 84e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,6,1);
 852:	8c 2f       	mov	r24, r28
 854:	66 e0       	ldi	r22, 0x06	; 6
 856:	41 e0       	ldi	r20, 0x01	; 1
 858:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port,7,1);
 85c:	8c 2f       	mov	r24, r28
 85e:	67 e0       	ldi	r22, 0x07	; 7
 860:	41 e0       	ldi	r20, 0x01	; 1
 862:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port_EN,EN,1);
 866:	81 e4       	ldi	r24, 0x41	; 65
 868:	60 e0       	ldi	r22, 0x00	; 0
 86a:	41 e0       	ldi	r20, 0x01	; 1
 86c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port_RW,RW,1);
 870:	81 e4       	ldi	r24, 0x41	; 65
 872:	61 e0       	ldi	r22, 0x01	; 1
 874:	41 e0       	ldi	r20, 0x01	; 1
 876:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir(port_RS,RS,1);
 87a:	81 e4       	ldi	r24, 0x41	; 65
 87c:	62 e0       	ldi	r22, 0x02	; 2
 87e:	41 e0       	ldi	r20, 0x01	; 1
 880:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write(port_RW,RW,0);
 884:	81 e4       	ldi	r24, 0x41	; 65
 886:	61 e0       	ldi	r22, 0x01	; 1
 888:	40 e0       	ldi	r20, 0x00	; 0
 88a:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_vSend_cmd(port,RETURN_HOME);
 88e:	8c 2f       	mov	r24, r28
 890:	62 e0       	ldi	r22, 0x02	; 2
 892:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 896:	af e1       	ldi	r26, 0x1F	; 31
 898:	be e4       	ldi	r27, 0x4E	; 78
 89a:	11 97       	sbiw	r26, 0x01	; 1
 89c:	f1 f7       	brne	.-4      	; 0x89a <__stack+0x3b>
 89e:	00 c0       	rjmp	.+0      	; 0x8a0 <__stack+0x41>
 8a0:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(port,FOUR_BITS);
 8a2:	8c 2f       	mov	r24, r28
 8a4:	68 e2       	ldi	r22, 0x28	; 40
 8a6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 8aa:	8f ec       	ldi	r24, 0xCF	; 207
 8ac:	97 e0       	ldi	r25, 0x07	; 7
 8ae:	01 97       	sbiw	r24, 0x01	; 1
 8b0:	f1 f7       	brne	.-4      	; 0x8ae <__stack+0x4f>
 8b2:	00 c0       	rjmp	.+0      	; 0x8b4 <__stack+0x55>
 8b4:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(port,CURSOR_ON_DISPLAY_ON);
 8b6:	8c 2f       	mov	r24, r28
 8b8:	6c e0       	ldi	r22, 0x0C	; 12
 8ba:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 8be:	af ec       	ldi	r26, 0xCF	; 207
 8c0:	b7 e0       	ldi	r27, 0x07	; 7
 8c2:	11 97       	sbiw	r26, 0x01	; 1
 8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
 8c6:	00 c0       	rjmp	.+0      	; 0x8c8 <__stack+0x69>
 8c8:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(port,CLR_SCREEN);
 8ca:	8c 2f       	mov	r24, r28
 8cc:	61 e0       	ldi	r22, 0x01	; 1
 8ce:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 8d2:	8f e1       	ldi	r24, 0x1F	; 31
 8d4:	9e e4       	ldi	r25, 0x4E	; 78
 8d6:	01 97       	sbiw	r24, 0x01	; 1
 8d8:	f1 f7       	brne	.-4      	; 0x8d6 <__stack+0x77>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <__stack+0x7d>
 8dc:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(port,ENTRY_MODE);
 8de:	8c 2f       	mov	r24, r28
 8e0:	66 e0       	ldi	r22, 0x06	; 6
 8e2:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 8e6:	af ec       	ldi	r26, 0xCF	; 207
 8e8:	b7 e0       	ldi	r27, 0x07	; 7
 8ea:	11 97       	sbiw	r26, 0x01	; 1
 8ec:	f1 f7       	brne	.-4      	; 0x8ea <__stack+0x8b>
 8ee:	00 c0       	rjmp	.+0      	; 0x8f0 <__stack+0x91>
 8f0:	00 00       	nop
	_delay_ms(1);
	#endif
}
 8f2:	cf 91       	pop	r28
 8f4:	08 95       	ret

000008f6 <LCD_vSend_char>:
	enable();
	#endif
	_delay_ms(1);
}

void LCD_vSend_char (char port,char data){
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	d8 2f       	mov	r29, r24
 8fc:	c6 2f       	mov	r28, r22
	DIO_write_port(port,data);
	DIO_write(port_RS,RS,1);
	enable();
	
	#elif defined four_bits_mode
	write_high_nibble(port,data>>4);
 8fe:	62 95       	swap	r22
 900:	6f 70       	andi	r22, 0x0F	; 15
 902:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <write_high_nibble>
	DIO_write(port_RS,RS,1);
 906:	81 e4       	ldi	r24, 0x41	; 65
 908:	62 e0       	ldi	r22, 0x02	; 2
 90a:	41 e0       	ldi	r20, 0x01	; 1
 90c:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 910:	0e 94 da 03 	call	0x7b4	; 0x7b4 <enable>
	write_high_nibble(port,data);
 914:	8d 2f       	mov	r24, r29
 916:	6c 2f       	mov	r22, r28
 918:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <write_high_nibble>
	DIO_write(port_RS,RS,1);
 91c:	81 e4       	ldi	r24, 0x41	; 65
 91e:	62 e0       	ldi	r22, 0x02	; 2
 920:	41 e0       	ldi	r20, 0x01	; 1
 922:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	enable();
 926:	0e 94 da 03 	call	0x7b4	; 0x7b4 <enable>
 92a:	8f ec       	ldi	r24, 0xCF	; 207
 92c:	97 e0       	ldi	r25, 0x07	; 7
 92e:	01 97       	sbiw	r24, 0x01	; 1
 930:	f1 f7       	brne	.-4      	; 0x92e <LCD_vSend_char+0x38>
 932:	00 c0       	rjmp	.+0      	; 0x934 <LCD_vSend_char+0x3e>
 934:	00 00       	nop
	#endif
	_delay_ms(1);
}
 936:	df 91       	pop	r29
 938:	cf 91       	pop	r28
 93a:	08 95       	ret

0000093c <LCD_vSend_string>:

void LCD_vSend_string (char port,char * data){
 93c:	1f 93       	push	r17
 93e:	cf 93       	push	r28
 940:	df 93       	push	r29
 942:	18 2f       	mov	r17, r24
 944:	eb 01       	movw	r28, r22
	while((* data) != '\0'){
 946:	68 81       	ld	r22, Y
 948:	66 23       	and	r22, r22
 94a:	39 f0       	breq	.+14     	; 0x95a <LCD_vSend_string+0x1e>
	enable();
	#endif
	_delay_ms(1);
}

void LCD_vSend_string (char port,char * data){
 94c:	21 96       	adiw	r28, 0x01	; 1
	while((* data) != '\0'){
		LCD_vSend_char(port,* data);
 94e:	81 2f       	mov	r24, r17
 950:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
	#endif
	_delay_ms(1);
}

void LCD_vSend_string (char port,char * data){
	while((* data) != '\0'){
 954:	69 91       	ld	r22, Y+
 956:	66 23       	and	r22, r22
 958:	d1 f7       	brne	.-12     	; 0x94e <LCD_vSend_string+0x12>
		LCD_vSend_char(port,* data);
		data++;
	}	
	}
 95a:	df 91       	pop	r29
 95c:	cf 91       	pop	r28
 95e:	1f 91       	pop	r17
 960:	08 95       	ret

00000962 <LCD_clearscreen>:
	
void LCD_clearscreen(char port){
	LCD_vSend_cmd(port,CLR_SCREEN);
 962:	61 e0       	ldi	r22, 0x01	; 1
 964:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 968:	8f e1       	ldi	r24, 0x1F	; 31
 96a:	9e e4       	ldi	r25, 0x4E	; 78
 96c:	01 97       	sbiw	r24, 0x01	; 1
 96e:	f1 f7       	brne	.-4      	; 0x96c <LCD_clearscreen+0xa>
 970:	00 c0       	rjmp	.+0      	; 0x972 <LCD_clearscreen+0x10>
 972:	00 00       	nop
	_delay_ms(10);
}
 974:	08 95       	ret

00000976 <LCD_movecursor>:

void LCD_movecursor (char port,char row,char coloumn){
	char data;
	if(row>2 || row<1 || coloumn>16 || coloumn<1){
 976:	26 2f       	mov	r18, r22
 978:	21 50       	subi	r18, 0x01	; 1
 97a:	22 30       	cpi	r18, 0x02	; 2
 97c:	70 f4       	brcc	.+28     	; 0x99a <LCD_movecursor+0x24>
 97e:	41 31       	cpi	r20, 0x11	; 17
 980:	70 f4       	brcc	.+28     	; 0x99e <LCD_movecursor+0x28>
 982:	44 23       	and	r20, r20
 984:	71 f0       	breq	.+28     	; 0x9a2 <LCD_movecursor+0x2c>
		data=0x80;
	}
	else if (row==1){
 986:	61 30       	cpi	r22, 0x01	; 1
 988:	19 f4       	brne	.+6      	; 0x990 <LCD_movecursor+0x1a>
		data = 0x80+coloumn-1;
 98a:	94 2f       	mov	r25, r20
 98c:	91 58       	subi	r25, 0x81	; 129
 98e:	0a c0       	rjmp	.+20     	; 0x9a4 <LCD_movecursor+0x2e>
	}
	else if (row==2){
 990:	62 30       	cpi	r22, 0x02	; 2
 992:	41 f4       	brne	.+16     	; 0x9a4 <LCD_movecursor+0x2e>
		data = 0xc0+coloumn-1;
 994:	94 2f       	mov	r25, r20
 996:	91 54       	subi	r25, 0x41	; 65
 998:	05 c0       	rjmp	.+10     	; 0x9a4 <LCD_movecursor+0x2e>
}

void LCD_movecursor (char port,char row,char coloumn){
	char data;
	if(row>2 || row<1 || coloumn>16 || coloumn<1){
		data=0x80;
 99a:	90 e8       	ldi	r25, 0x80	; 128
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <LCD_movecursor+0x2e>
 99e:	90 e8       	ldi	r25, 0x80	; 128
 9a0:	01 c0       	rjmp	.+2      	; 0x9a4 <LCD_movecursor+0x2e>
 9a2:	90 e8       	ldi	r25, 0x80	; 128
		data = 0x80+coloumn-1;
	}
	else if (row==2){
		data = 0xc0+coloumn-1;
	}
	LCD_vSend_cmd(port,data);
 9a4:	69 2f       	mov	r22, r25
 9a6:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <LCD_vSend_cmd>
 9aa:	8f ec       	ldi	r24, 0xCF	; 207
 9ac:	97 e0       	ldi	r25, 0x07	; 7
 9ae:	01 97       	sbiw	r24, 0x01	; 1
 9b0:	f1 f7       	brne	.-4      	; 0x9ae <LCD_movecursor+0x38>
 9b2:	00 c0       	rjmp	.+0      	; 0x9b4 <LCD_movecursor+0x3e>
 9b4:	00 00       	nop
	_delay_ms(1);
	
}
 9b6:	08 95       	ret

000009b8 <main>:
unsigned char minutes_counter=0,hours_counter=0,first_digit,second_digit,val;
volatile unsigned char seconds_counter=0;

int main(void)
{
	LCD_vInit('A');
 9b8:	81 e4       	ldi	r24, 0x41	; 65
 9ba:	0e 94 14 04 	call	0x828	; 0x828 <LCD_vInit>
	keypad_vInit();
 9be:	0e 94 fb 02 	call	0x5f6	; 0x5f6 <keypad_vInit>
	sevensegment_init('B');
 9c2:	82 e4       	ldi	r24, 0x42	; 66
 9c4:	0e 94 dc 06 	call	0xdb8	; 0xdb8 <sevensegment_init>
	SET_BIT(DDRC,0);
 9c8:	a0 9a       	sbi	0x14, 0	; 20
	SET_BIT(DDRC,1);
 9ca:	a1 9a       	sbi	0x14, 1	; 20
	SET_BIT(DDRC,2);
 9cc:	a2 9a       	sbi	0x14, 2	; 20
	SET_BIT(DDRC,3);
 9ce:	a3 9a       	sbi	0x14, 3	; 20
	SET_BIT(DDRC,4);
 9d0:	a4 9a       	sbi	0x14, 4	; 20
	SET_BIT(DDRC,5);
 9d2:	a5 9a       	sbi	0x14, 5	; 20
	LCD_vSend_string('A',"press 1 to:");
 9d4:	81 e4       	ldi	r24, 0x41	; 65
 9d6:	60 e7       	ldi	r22, 0x70	; 112
 9d8:	70 e0       	ldi	r23, 0x00	; 0
 9da:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
	LCD_movecursor('A',2,1);
 9de:	81 e4       	ldi	r24, 0x41	; 65
 9e0:	62 e0       	ldi	r22, 0x02	; 2
 9e2:	41 e0       	ldi	r20, 0x01	; 1
 9e4:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_movecursor>
	LCD_vSend_string('A',"set clock");
 9e8:	81 e4       	ldi	r24, 0x41	; 65
 9ea:	6c e7       	ldi	r22, 0x7C	; 124
 9ec:	70 e0       	ldi	r23, 0x00	; 0
 9ee:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
	Timer2_overflow_init_interrupt ();
 9f2:	0e 94 4b 07 	call	0xe96	; 0xe96 <Timer2_overflow_init_interrupt>
	LCD_vSend_string('A',"set clock");
	
  }
   else {
	   LCD_clearscreen('A');
	   LCD_vSend_string('A',"wrong choice");
 9f6:	0f 2e       	mov	r0, r31
 9f8:	f5 ea       	ldi	r31, 0xA5	; 165
 9fa:	cf 2e       	mov	r12, r31
 9fc:	f0 e0       	ldi	r31, 0x00	; 0
 9fe:	df 2e       	mov	r13, r31
 a00:	f0 2d       	mov	r31, r0
	   _delay_ms(200);
	   LCD_clearscreen('A');
	   LCD_vSend_string('A',"press 1 to:");
 a02:	00 e7       	ldi	r16, 0x70	; 112
 a04:	10 e0       	ldi	r17, 0x00	; 0
	   LCD_movecursor('A',2,1);
	   LCD_vSend_string('A',"set clock");
 a06:	0f 2e       	mov	r0, r31
 a08:	fc e7       	ldi	r31, 0x7C	; 124
 a0a:	ef 2e       	mov	r14, r31
 a0c:	f0 e0       	ldi	r31, 0x00	; 0
 a0e:	ff 2e       	mov	r15, r31
 a10:	f0 2d       	mov	r31, r0
    {
		val = keypad_u8Read();
		if (val != NOTPRESSED){
			if(val=='1'){
				LCD_clearscreen('A');
				LCD_vSend_string('A',"hours=--");
 a12:	0f 2e       	mov	r0, r31
 a14:	f6 e8       	ldi	r31, 0x86	; 134
 a16:	af 2e       	mov	r10, r31
 a18:	f0 e0       	ldi	r31, 0x00	; 0
 a1a:	bf 2e       	mov	r11, r31
 a1c:	f0 2d       	mov	r31, r0
	LCD_vSend_char('A',second_digit);
	_delay_ms(300);
	hours_counter=(second_digit-48)+10*(first_digit-48);
	LCD_clearscreen('A');
	
	LCD_vSend_string('A',"minutes=--");
 a1e:	0f 2e       	mov	r0, r31
 a20:	ff e8       	ldi	r31, 0x8F	; 143
 a22:	8f 2e       	mov	r8, r31
 a24:	f0 e0       	ldi	r31, 0x00	; 0
 a26:	9f 2e       	mov	r9, r31
 a28:	f0 2d       	mov	r31, r0
	LCD_vSend_char('A',second_digit);
	_delay_ms(300);
	minutes_counter=(second_digit-48)+10*(first_digit-48);
	LCD_clearscreen('A');
	
	LCD_vSend_string('A',"seconds=--");
 a2a:	0f 2e       	mov	r0, r31
 a2c:	fa e9       	ldi	r31, 0x9A	; 154
 a2e:	6f 2e       	mov	r6, r31
 a30:	f0 e0       	ldi	r31, 0x00	; 0
 a32:	7f 2e       	mov	r7, r31
 a34:	f0 2d       	mov	r31, r0
				SET_BIT(PORTC,2);
				SET_BIT(PORTC,3);
				SET_BIT(PORTC,4);
				SET_BIT(PORTC,5);
				CLR_BIT(PORTC,0);
				sevensegment_write('B',seconds_counter%10);
 a36:	ca e0       	ldi	r28, 0x0A	; 10
	LCD_vSend_string('A',"set clock");
	Timer2_overflow_init_interrupt ();

    while(1)
    {
		val = keypad_u8Read();
 a38:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 a3c:	80 93 c1 00 	sts	0x00C1, r24
		if (val != NOTPRESSED){
 a40:	8f 3f       	cpi	r24, 0xFF	; 255
 a42:	09 f4       	brne	.+2      	; 0xa46 <main+0x8e>
 a44:	0c c1       	rjmp	.+536    	; 0xc5e <main+0x2a6>
			if(val=='1'){
 a46:	81 33       	cpi	r24, 0x31	; 49
 a48:	09 f0       	breq	.+2      	; 0xa4c <main+0x94>
 a4a:	e9 c0       	rjmp	.+466    	; 0xc1e <main+0x266>
				LCD_clearscreen('A');
 a4c:	81 e4       	ldi	r24, 0x41	; 65
 a4e:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_clearscreen>
				LCD_vSend_string('A',"hours=--");
 a52:	81 e4       	ldi	r24, 0x41	; 65
 a54:	b5 01       	movw	r22, r10
 a56:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
				LCD_movecursor('A',1,7);
 a5a:	81 e4       	ldi	r24, 0x41	; 65
 a5c:	61 e0       	ldi	r22, 0x01	; 1
 a5e:	47 e0       	ldi	r20, 0x07	; 7
 a60:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_movecursor>
 a64:	8f ef       	ldi	r24, 0xFF	; 255
 a66:	94 e3       	ldi	r25, 0x34	; 52
 a68:	ac e0       	ldi	r26, 0x0C	; 12
 a6a:	81 50       	subi	r24, 0x01	; 1
 a6c:	90 40       	sbci	r25, 0x00	; 0
 a6e:	a0 40       	sbci	r26, 0x00	; 0
 a70:	e1 f7       	brne	.-8      	; 0xa6a <main+0xb2>
 a72:	00 c0       	rjmp	.+0      	; 0xa74 <main+0xbc>
 a74:	00 00       	nop
				_delay_ms(500);
				do{
					first_digit=keypad_u8Read();
 a76:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 a7a:	68 2f       	mov	r22, r24
 a7c:	80 93 bf 00 	sts	0x00BF, r24
    }while(first_digit==NOTPRESSED);
 a80:	8f 3f       	cpi	r24, 0xFF	; 255
 a82:	c9 f3       	breq	.-14     	; 0xa76 <main+0xbe>
	
	LCD_vSend_char('A',first_digit);
 a84:	81 e4       	ldi	r24, 0x41	; 65
 a86:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
 a8a:	8f ef       	ldi	r24, 0xFF	; 255
 a8c:	92 e5       	ldi	r25, 0x52	; 82
 a8e:	a7 e0       	ldi	r26, 0x07	; 7
 a90:	81 50       	subi	r24, 0x01	; 1
 a92:	90 40       	sbci	r25, 0x00	; 0
 a94:	a0 40       	sbci	r26, 0x00	; 0
 a96:	e1 f7       	brne	.-8      	; 0xa90 <main+0xd8>
 a98:	00 c0       	rjmp	.+0      	; 0xa9a <main+0xe2>
 a9a:	00 00       	nop
	_delay_ms(300);
	
	do{
		second_digit=keypad_u8Read();
 a9c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 aa0:	68 2f       	mov	r22, r24
 aa2:	80 93 c0 00 	sts	0x00C0, r24
	}while (second_digit==NOTPRESSED);
 aa6:	8f 3f       	cpi	r24, 0xFF	; 255
 aa8:	c9 f3       	breq	.-14     	; 0xa9c <main+0xe4>
	
	LCD_vSend_char('A',second_digit);
 aaa:	81 e4       	ldi	r24, 0x41	; 65
 aac:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
 ab0:	8f ef       	ldi	r24, 0xFF	; 255
 ab2:	92 e5       	ldi	r25, 0x52	; 82
 ab4:	a7 e0       	ldi	r26, 0x07	; 7
 ab6:	81 50       	subi	r24, 0x01	; 1
 ab8:	90 40       	sbci	r25, 0x00	; 0
 aba:	a0 40       	sbci	r26, 0x00	; 0
 abc:	e1 f7       	brne	.-8      	; 0xab6 <main+0xfe>
 abe:	00 c0       	rjmp	.+0      	; 0xac0 <main+0x108>
 ac0:	00 00       	nop
	_delay_ms(300);
	hours_counter=(second_digit-48)+10*(first_digit-48);
 ac2:	90 91 c0 00 	lds	r25, 0x00C0
 ac6:	90 51       	subi	r25, 0x10	; 16
 ac8:	80 91 bf 00 	lds	r24, 0x00BF
 acc:	88 0f       	add	r24, r24
 ace:	28 2f       	mov	r18, r24
 ad0:	22 0f       	add	r18, r18
 ad2:	22 0f       	add	r18, r18
 ad4:	82 0f       	add	r24, r18
 ad6:	89 0f       	add	r24, r25
 ad8:	80 93 bd 00 	sts	0x00BD, r24
	LCD_clearscreen('A');
 adc:	81 e4       	ldi	r24, 0x41	; 65
 ade:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_clearscreen>
	
	LCD_vSend_string('A',"minutes=--");
 ae2:	81 e4       	ldi	r24, 0x41	; 65
 ae4:	b4 01       	movw	r22, r8
 ae6:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
				LCD_movecursor('A',1,9);
 aea:	81 e4       	ldi	r24, 0x41	; 65
 aec:	61 e0       	ldi	r22, 0x01	; 1
 aee:	49 e0       	ldi	r20, 0x09	; 9
 af0:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_movecursor>
 af4:	8f ef       	ldi	r24, 0xFF	; 255
 af6:	94 e3       	ldi	r25, 0x34	; 52
 af8:	ac e0       	ldi	r26, 0x0C	; 12
 afa:	81 50       	subi	r24, 0x01	; 1
 afc:	90 40       	sbci	r25, 0x00	; 0
 afe:	a0 40       	sbci	r26, 0x00	; 0
 b00:	e1 f7       	brne	.-8      	; 0xafa <main+0x142>
 b02:	00 c0       	rjmp	.+0      	; 0xb04 <main+0x14c>
 b04:	00 00       	nop
				_delay_ms(500);
				do{
					first_digit=keypad_u8Read();
 b06:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 b0a:	68 2f       	mov	r22, r24
 b0c:	80 93 bf 00 	sts	0x00BF, r24
    }while(first_digit==NOTPRESSED);
 b10:	8f 3f       	cpi	r24, 0xFF	; 255
 b12:	c9 f3       	breq	.-14     	; 0xb06 <main+0x14e>
	
	LCD_vSend_char('A',first_digit);
 b14:	81 e4       	ldi	r24, 0x41	; 65
 b16:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
 b1a:	8f ef       	ldi	r24, 0xFF	; 255
 b1c:	92 e5       	ldi	r25, 0x52	; 82
 b1e:	a7 e0       	ldi	r26, 0x07	; 7
 b20:	81 50       	subi	r24, 0x01	; 1
 b22:	90 40       	sbci	r25, 0x00	; 0
 b24:	a0 40       	sbci	r26, 0x00	; 0
 b26:	e1 f7       	brne	.-8      	; 0xb20 <main+0x168>
 b28:	00 c0       	rjmp	.+0      	; 0xb2a <main+0x172>
 b2a:	00 00       	nop
	_delay_ms(300);
	
	do{
		second_digit=keypad_u8Read();
 b2c:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 b30:	68 2f       	mov	r22, r24
 b32:	80 93 c0 00 	sts	0x00C0, r24
	}while (second_digit==NOTPRESSED);
 b36:	8f 3f       	cpi	r24, 0xFF	; 255
 b38:	c9 f3       	breq	.-14     	; 0xb2c <main+0x174>
	
	LCD_vSend_char('A',second_digit);
 b3a:	81 e4       	ldi	r24, 0x41	; 65
 b3c:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
 b40:	8f ef       	ldi	r24, 0xFF	; 255
 b42:	92 e5       	ldi	r25, 0x52	; 82
 b44:	a7 e0       	ldi	r26, 0x07	; 7
 b46:	81 50       	subi	r24, 0x01	; 1
 b48:	90 40       	sbci	r25, 0x00	; 0
 b4a:	a0 40       	sbci	r26, 0x00	; 0
 b4c:	e1 f7       	brne	.-8      	; 0xb46 <main+0x18e>
 b4e:	00 c0       	rjmp	.+0      	; 0xb50 <main+0x198>
 b50:	00 00       	nop
	_delay_ms(300);
	minutes_counter=(second_digit-48)+10*(first_digit-48);
 b52:	90 91 c0 00 	lds	r25, 0x00C0
 b56:	90 51       	subi	r25, 0x10	; 16
 b58:	80 91 bf 00 	lds	r24, 0x00BF
 b5c:	88 0f       	add	r24, r24
 b5e:	28 2f       	mov	r18, r24
 b60:	22 0f       	add	r18, r18
 b62:	22 0f       	add	r18, r18
 b64:	82 0f       	add	r24, r18
 b66:	89 0f       	add	r24, r25
 b68:	80 93 be 00 	sts	0x00BE, r24
	LCD_clearscreen('A');
 b6c:	81 e4       	ldi	r24, 0x41	; 65
 b6e:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_clearscreen>
	
	LCD_vSend_string('A',"seconds=--");
 b72:	81 e4       	ldi	r24, 0x41	; 65
 b74:	b3 01       	movw	r22, r6
 b76:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
	LCD_movecursor('A',1,9);
 b7a:	81 e4       	ldi	r24, 0x41	; 65
 b7c:	61 e0       	ldi	r22, 0x01	; 1
 b7e:	49 e0       	ldi	r20, 0x09	; 9
 b80:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_movecursor>
 b84:	8f ef       	ldi	r24, 0xFF	; 255
 b86:	94 e3       	ldi	r25, 0x34	; 52
 b88:	ac e0       	ldi	r26, 0x0C	; 12
 b8a:	81 50       	subi	r24, 0x01	; 1
 b8c:	90 40       	sbci	r25, 0x00	; 0
 b8e:	a0 40       	sbci	r26, 0x00	; 0
 b90:	e1 f7       	brne	.-8      	; 0xb8a <main+0x1d2>
 b92:	00 c0       	rjmp	.+0      	; 0xb94 <main+0x1dc>
 b94:	00 00       	nop
	_delay_ms(500);
	do{
		first_digit=keypad_u8Read();
 b96:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 b9a:	68 2f       	mov	r22, r24
 b9c:	80 93 bf 00 	sts	0x00BF, r24
	}while(first_digit==NOTPRESSED);
 ba0:	8f 3f       	cpi	r24, 0xFF	; 255
 ba2:	c9 f3       	breq	.-14     	; 0xb96 <main+0x1de>
	
	LCD_vSend_char('A',first_digit);
 ba4:	81 e4       	ldi	r24, 0x41	; 65
 ba6:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
 baa:	8f ef       	ldi	r24, 0xFF	; 255
 bac:	92 e5       	ldi	r25, 0x52	; 82
 bae:	a7 e0       	ldi	r26, 0x07	; 7
 bb0:	81 50       	subi	r24, 0x01	; 1
 bb2:	90 40       	sbci	r25, 0x00	; 0
 bb4:	a0 40       	sbci	r26, 0x00	; 0
 bb6:	e1 f7       	brne	.-8      	; 0xbb0 <main+0x1f8>
 bb8:	00 c0       	rjmp	.+0      	; 0xbba <main+0x202>
 bba:	00 00       	nop
	_delay_ms(300);
	
	do{
		second_digit=keypad_u8Read();
 bbc:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <keypad_u8Read>
 bc0:	68 2f       	mov	r22, r24
 bc2:	80 93 c0 00 	sts	0x00C0, r24
	}while (second_digit==NOTPRESSED);
 bc6:	8f 3f       	cpi	r24, 0xFF	; 255
 bc8:	c9 f3       	breq	.-14     	; 0xbbc <main+0x204>
	
	LCD_vSend_char('A',second_digit);
 bca:	81 e4       	ldi	r24, 0x41	; 65
 bcc:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <LCD_vSend_char>
 bd0:	8f ef       	ldi	r24, 0xFF	; 255
 bd2:	92 e5       	ldi	r25, 0x52	; 82
 bd4:	a7 e0       	ldi	r26, 0x07	; 7
 bd6:	81 50       	subi	r24, 0x01	; 1
 bd8:	90 40       	sbci	r25, 0x00	; 0
 bda:	a0 40       	sbci	r26, 0x00	; 0
 bdc:	e1 f7       	brne	.-8      	; 0xbd6 <main+0x21e>
 bde:	00 c0       	rjmp	.+0      	; 0xbe0 <main+0x228>
 be0:	00 00       	nop
	_delay_ms(300);
	seconds_counter=(second_digit-48)+10*(first_digit-48);
 be2:	90 91 c0 00 	lds	r25, 0x00C0
 be6:	90 51       	subi	r25, 0x10	; 16
 be8:	80 91 bf 00 	lds	r24, 0x00BF
 bec:	88 0f       	add	r24, r24
 bee:	28 2f       	mov	r18, r24
 bf0:	22 0f       	add	r18, r18
 bf2:	22 0f       	add	r18, r18
 bf4:	82 0f       	add	r24, r18
 bf6:	89 0f       	add	r24, r25
 bf8:	80 93 bc 00 	sts	0x00BC, r24
	LCD_clearscreen('A');
 bfc:	81 e4       	ldi	r24, 0x41	; 65
 bfe:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_clearscreen>
	LCD_vSend_string('A',"press 1 to:");
 c02:	81 e4       	ldi	r24, 0x41	; 65
 c04:	b8 01       	movw	r22, r16
 c06:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
	LCD_movecursor('A',2,1);
 c0a:	81 e4       	ldi	r24, 0x41	; 65
 c0c:	62 e0       	ldi	r22, 0x02	; 2
 c0e:	41 e0       	ldi	r20, 0x01	; 1
 c10:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_movecursor>
	LCD_vSend_string('A',"set clock");
 c14:	81 e4       	ldi	r24, 0x41	; 65
 c16:	b7 01       	movw	r22, r14
 c18:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
 c1c:	20 c0       	rjmp	.+64     	; 0xc5e <main+0x2a6>
	
  }
   else {
	   LCD_clearscreen('A');
 c1e:	81 e4       	ldi	r24, 0x41	; 65
 c20:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_clearscreen>
	   LCD_vSend_string('A',"wrong choice");
 c24:	81 e4       	ldi	r24, 0x41	; 65
 c26:	b6 01       	movw	r22, r12
 c28:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
 c2c:	8f ef       	ldi	r24, 0xFF	; 255
 c2e:	91 ee       	ldi	r25, 0xE1	; 225
 c30:	a4 e0       	ldi	r26, 0x04	; 4
 c32:	81 50       	subi	r24, 0x01	; 1
 c34:	90 40       	sbci	r25, 0x00	; 0
 c36:	a0 40       	sbci	r26, 0x00	; 0
 c38:	e1 f7       	brne	.-8      	; 0xc32 <main+0x27a>
 c3a:	00 c0       	rjmp	.+0      	; 0xc3c <main+0x284>
 c3c:	00 00       	nop
	   _delay_ms(200);
	   LCD_clearscreen('A');
 c3e:	81 e4       	ldi	r24, 0x41	; 65
 c40:	0e 94 b1 04 	call	0x962	; 0x962 <LCD_clearscreen>
	   LCD_vSend_string('A',"press 1 to:");
 c44:	81 e4       	ldi	r24, 0x41	; 65
 c46:	b8 01       	movw	r22, r16
 c48:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
	   LCD_movecursor('A',2,1);
 c4c:	81 e4       	ldi	r24, 0x41	; 65
 c4e:	62 e0       	ldi	r22, 0x02	; 2
 c50:	41 e0       	ldi	r20, 0x01	; 1
 c52:	0e 94 bb 04 	call	0x976	; 0x976 <LCD_movecursor>
	   LCD_vSend_string('A',"set clock");
 c56:	81 e4       	ldi	r24, 0x41	; 65
 c58:	b7 01       	movw	r22, r14
 c5a:	0e 94 9e 04 	call	0x93c	; 0x93c <LCD_vSend_string>
   }

				}
				
				SET_BIT(PORTC,1);
 c5e:	a9 9a       	sbi	0x15, 1	; 21
				SET_BIT(PORTC,2);
 c60:	aa 9a       	sbi	0x15, 2	; 21
				SET_BIT(PORTC,3);
 c62:	ab 9a       	sbi	0x15, 3	; 21
				SET_BIT(PORTC,4);
 c64:	ac 9a       	sbi	0x15, 4	; 21
				SET_BIT(PORTC,5);
 c66:	ad 9a       	sbi	0x15, 5	; 21
				CLR_BIT(PORTC,0);
 c68:	a8 98       	cbi	0x15, 0	; 21
				sevensegment_write('B',seconds_counter%10);
 c6a:	80 91 bc 00 	lds	r24, 0x00BC
 c6e:	6c 2f       	mov	r22, r28
 c70:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__udivmodqi4>
 c74:	82 e4       	ldi	r24, 0x42	; 66
 c76:	69 2f       	mov	r22, r25
 c78:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sevensegment_write>
 c7c:	af e0       	ldi	r26, 0x0F	; 15
 c7e:	b7 e2       	ldi	r27, 0x27	; 39
 c80:	11 97       	sbiw	r26, 0x01	; 1
 c82:	f1 f7       	brne	.-4      	; 0xc80 <main+0x2c8>
 c84:	00 c0       	rjmp	.+0      	; 0xc86 <main+0x2ce>
 c86:	00 00       	nop
				_delay_ms(5);
				
				SET_BIT(PORTC,0);
 c88:	a8 9a       	sbi	0x15, 0	; 21
				SET_BIT(PORTC,2);
 c8a:	aa 9a       	sbi	0x15, 2	; 21
				SET_BIT(PORTC,3);
 c8c:	ab 9a       	sbi	0x15, 3	; 21
				SET_BIT(PORTC,4);
 c8e:	ac 9a       	sbi	0x15, 4	; 21
				SET_BIT(PORTC,5);
 c90:	ad 9a       	sbi	0x15, 5	; 21
				CLR_BIT(PORTC,1);
 c92:	a9 98       	cbi	0x15, 1	; 21
				sevensegment_write('B',seconds_counter/10);
 c94:	80 91 bc 00 	lds	r24, 0x00BC
 c98:	6c 2f       	mov	r22, r28
 c9a:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__udivmodqi4>
 c9e:	68 2f       	mov	r22, r24
 ca0:	82 e4       	ldi	r24, 0x42	; 66
 ca2:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sevensegment_write>
 ca6:	8f e0       	ldi	r24, 0x0F	; 15
 ca8:	97 e2       	ldi	r25, 0x27	; 39
 caa:	01 97       	sbiw	r24, 0x01	; 1
 cac:	f1 f7       	brne	.-4      	; 0xcaa <main+0x2f2>
 cae:	00 c0       	rjmp	.+0      	; 0xcb0 <main+0x2f8>
 cb0:	00 00       	nop
				_delay_ms(5);
				
				SET_BIT(PORTC,0);
 cb2:	a8 9a       	sbi	0x15, 0	; 21
				SET_BIT(PORTC,1);
 cb4:	a9 9a       	sbi	0x15, 1	; 21
				SET_BIT(PORTC,3);
 cb6:	ab 9a       	sbi	0x15, 3	; 21
				SET_BIT(PORTC,4);
 cb8:	ac 9a       	sbi	0x15, 4	; 21
				SET_BIT(PORTC,5);
 cba:	ad 9a       	sbi	0x15, 5	; 21
				CLR_BIT(PORTC,2);
 cbc:	aa 98       	cbi	0x15, 2	; 21
				sevensegment_write('B',minutes_counter%10);
 cbe:	80 91 be 00 	lds	r24, 0x00BE
 cc2:	6c 2f       	mov	r22, r28
 cc4:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__udivmodqi4>
 cc8:	82 e4       	ldi	r24, 0x42	; 66
 cca:	69 2f       	mov	r22, r25
 ccc:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sevensegment_write>
 cd0:	af e0       	ldi	r26, 0x0F	; 15
 cd2:	b7 e2       	ldi	r27, 0x27	; 39
 cd4:	11 97       	sbiw	r26, 0x01	; 1
 cd6:	f1 f7       	brne	.-4      	; 0xcd4 <main+0x31c>
 cd8:	00 c0       	rjmp	.+0      	; 0xcda <main+0x322>
 cda:	00 00       	nop
				_delay_ms(5);
				
				SET_BIT(PORTC,0);
 cdc:	a8 9a       	sbi	0x15, 0	; 21
				SET_BIT(PORTC,1);
 cde:	a9 9a       	sbi	0x15, 1	; 21
				SET_BIT(PORTC,2);
 ce0:	aa 9a       	sbi	0x15, 2	; 21
				SET_BIT(PORTC,4);
 ce2:	ac 9a       	sbi	0x15, 4	; 21
				SET_BIT(PORTC,5);
 ce4:	ad 9a       	sbi	0x15, 5	; 21
				CLR_BIT(PORTC,3);
 ce6:	ab 98       	cbi	0x15, 3	; 21
				sevensegment_write('B',minutes_counter/10);
 ce8:	80 91 be 00 	lds	r24, 0x00BE
 cec:	6c 2f       	mov	r22, r28
 cee:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__udivmodqi4>
 cf2:	68 2f       	mov	r22, r24
 cf4:	82 e4       	ldi	r24, 0x42	; 66
 cf6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sevensegment_write>
 cfa:	8f e0       	ldi	r24, 0x0F	; 15
 cfc:	97 e2       	ldi	r25, 0x27	; 39
 cfe:	01 97       	sbiw	r24, 0x01	; 1
 d00:	f1 f7       	brne	.-4      	; 0xcfe <main+0x346>
 d02:	00 c0       	rjmp	.+0      	; 0xd04 <main+0x34c>
 d04:	00 00       	nop
				_delay_ms(5);
				
				SET_BIT(PORTC,0);
 d06:	a8 9a       	sbi	0x15, 0	; 21
				SET_BIT(PORTC,1);
 d08:	a9 9a       	sbi	0x15, 1	; 21
				SET_BIT(PORTC,2);
 d0a:	aa 9a       	sbi	0x15, 2	; 21
				SET_BIT(PORTC,3);
 d0c:	ab 9a       	sbi	0x15, 3	; 21
				SET_BIT(PORTC,5);
 d0e:	ad 9a       	sbi	0x15, 5	; 21
				CLR_BIT(PORTC,4);
 d10:	ac 98       	cbi	0x15, 4	; 21
				sevensegment_write('B',hours_counter%10);
 d12:	80 91 bd 00 	lds	r24, 0x00BD
 d16:	6c 2f       	mov	r22, r28
 d18:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__udivmodqi4>
 d1c:	82 e4       	ldi	r24, 0x42	; 66
 d1e:	69 2f       	mov	r22, r25
 d20:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sevensegment_write>
 d24:	af e0       	ldi	r26, 0x0F	; 15
 d26:	b7 e2       	ldi	r27, 0x27	; 39
 d28:	11 97       	sbiw	r26, 0x01	; 1
 d2a:	f1 f7       	brne	.-4      	; 0xd28 <main+0x370>
 d2c:	00 c0       	rjmp	.+0      	; 0xd2e <main+0x376>
 d2e:	00 00       	nop
				_delay_ms(5);
				
				SET_BIT(PORTC,0);
 d30:	a8 9a       	sbi	0x15, 0	; 21
				SET_BIT(PORTC,1);
 d32:	a9 9a       	sbi	0x15, 1	; 21
				SET_BIT(PORTC,2);
 d34:	aa 9a       	sbi	0x15, 2	; 21
				SET_BIT(PORTC,3);
 d36:	ab 9a       	sbi	0x15, 3	; 21
				SET_BIT(PORTC,4);
 d38:	ac 9a       	sbi	0x15, 4	; 21
				CLR_BIT(PORTC,5);
 d3a:	ad 98       	cbi	0x15, 5	; 21
				sevensegment_write('B',hours_counter/10);
 d3c:	80 91 bd 00 	lds	r24, 0x00BD
 d40:	6c 2f       	mov	r22, r28
 d42:	0e 94 59 07 	call	0xeb2	; 0xeb2 <__udivmodqi4>
 d46:	68 2f       	mov	r22, r24
 d48:	82 e4       	ldi	r24, 0x42	; 66
 d4a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <sevensegment_write>
 d4e:	8f e0       	ldi	r24, 0x0F	; 15
 d50:	97 e2       	ldi	r25, 0x27	; 39
 d52:	01 97       	sbiw	r24, 0x01	; 1
 d54:	f1 f7       	brne	.-4      	; 0xd52 <main+0x39a>
 d56:	00 c0       	rjmp	.+0      	; 0xd58 <main+0x3a0>
 d58:	00 00       	nop
				_delay_ms(5);
				
				if (seconds_counter==60){
 d5a:	80 91 bc 00 	lds	r24, 0x00BC
 d5e:	8c 33       	cpi	r24, 0x3C	; 60
 d60:	39 f4       	brne	.+14     	; 0xd70 <main+0x3b8>
					seconds_counter=0;
 d62:	10 92 bc 00 	sts	0x00BC, r1
					minutes_counter++;
 d66:	80 91 be 00 	lds	r24, 0x00BE
 d6a:	8f 5f       	subi	r24, 0xFF	; 255
 d6c:	80 93 be 00 	sts	0x00BE, r24
				}
				if (minutes_counter==60){
 d70:	80 91 be 00 	lds	r24, 0x00BE
 d74:	8c 33       	cpi	r24, 0x3C	; 60
 d76:	39 f4       	brne	.+14     	; 0xd86 <main+0x3ce>
					minutes_counter=0;
 d78:	10 92 be 00 	sts	0x00BE, r1
					hours_counter++;
 d7c:	80 91 bd 00 	lds	r24, 0x00BD
 d80:	8f 5f       	subi	r24, 0xFF	; 255
 d82:	80 93 bd 00 	sts	0x00BD, r24
				}
				if (hours_counter==24){
 d86:	80 91 bd 00 	lds	r24, 0x00BD
 d8a:	88 31       	cpi	r24, 0x18	; 24
 d8c:	09 f0       	breq	.+2      	; 0xd90 <main+0x3d8>
 d8e:	54 ce       	rjmp	.-856    	; 0xa38 <main+0x80>
					hours_counter=0;
 d90:	10 92 bd 00 	sts	0x00BD, r1
 d94:	51 ce       	rjmp	.-862    	; 0xa38 <main+0x80>

00000d96 <__vector_5>:
				}
	}
				}				
				
	ISR (TIMER2_OVF_vect){
 d96:	1f 92       	push	r1
 d98:	0f 92       	push	r0
 d9a:	0f b6       	in	r0, 0x3f	; 63
 d9c:	0f 92       	push	r0
 d9e:	11 24       	eor	r1, r1
 da0:	8f 93       	push	r24
		 seconds_counter++;
 da2:	80 91 bc 00 	lds	r24, 0x00BC
 da6:	8f 5f       	subi	r24, 0xFF	; 255
 da8:	80 93 bc 00 	sts	0x00BC, r24
 dac:	8f 91       	pop	r24
 dae:	0f 90       	pop	r0
 db0:	0f be       	out	0x3f, r0	; 63
 db2:	0f 90       	pop	r0
 db4:	1f 90       	pop	r1
 db6:	18 95       	reti

00000db8 <sevensegment_init>:


#include "DIO.h"

void sevensegment_init (unsigned char port){
	DIO_set_port_direction(port,0xff);
 db8:	6f ef       	ldi	r22, 0xFF	; 255
 dba:	0e 94 e7 01 	call	0x3ce	; 0x3ce <DIO_set_port_direction>
}
 dbe:	08 95       	ret

00000dc0 <sevensegment_write>:

void sevensegment_write (unsigned char port,unsigned char number){
 dc0:	cf 93       	push	r28
 dc2:	df 93       	push	r29
 dc4:	cd b7       	in	r28, 0x3d	; 61
 dc6:	de b7       	in	r29, 0x3e	; 62
 dc8:	2a 97       	sbiw	r28, 0x0a	; 10
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
	
	unsigned char arr[]={ 0x3f,0x06,0x5b,0x4f,0x66,0x6d,0x7d,0x47,0x7f,0x6f};
 dd4:	de 01       	movw	r26, r28
 dd6:	11 96       	adiw	r26, 0x01	; 1
 dd8:	e2 eb       	ldi	r30, 0xB2	; 178
 dda:	f0 e0       	ldi	r31, 0x00	; 0
 ddc:	9a e0       	ldi	r25, 0x0A	; 10
 dde:	01 90       	ld	r0, Z+
 de0:	0d 92       	st	X+, r0
 de2:	91 50       	subi	r25, 0x01	; 1
 de4:	e1 f7       	brne	.-8      	; 0xdde <sevensegment_write+0x1e>
		DIO_write_port (port,arr[number]);
 de6:	fe 01       	movw	r30, r28
 de8:	e6 0f       	add	r30, r22
 dea:	f1 1d       	adc	r31, r1
 dec:	61 81       	ldd	r22, Z+1	; 0x01
 dee:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
}
 df2:	2a 96       	adiw	r28, 0x0a	; 10
 df4:	0f b6       	in	r0, 0x3f	; 63
 df6:	f8 94       	cli
 df8:	de bf       	out	0x3e, r29	; 62
 dfa:	0f be       	out	0x3f, r0	; 63
 dfc:	cd bf       	out	0x3d, r28	; 61
 dfe:	df 91       	pop	r29
 e00:	cf 91       	pop	r28
 e02:	08 95       	ret

00000e04 <Timer_CTC_init_interrupt>:
#include <avr/interrupt.h>
#include <avr/io.h>
#include "std_macrous.h"

void Timer_CTC_init_interrupt (void){
	SET_BIT(TCCR0,WGM01);
 e04:	83 b7       	in	r24, 0x33	; 51
 e06:	88 60       	ori	r24, 0x08	; 8
 e08:	83 bf       	out	0x33, r24	; 51
	OCR0 = 80;
 e0a:	80 e5       	ldi	r24, 0x50	; 80
 e0c:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 e0e:	83 b7       	in	r24, 0x33	; 51
 e10:	81 60       	ori	r24, 0x01	; 1
 e12:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 e14:	83 b7       	in	r24, 0x33	; 51
 e16:	84 60       	ori	r24, 0x04	; 4
 e18:	83 bf       	out	0x33, r24	; 51
	
	sei();
 e1a:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
 e1c:	89 b7       	in	r24, 0x39	; 57
 e1e:	82 60       	ori	r24, 0x02	; 2
 e20:	89 bf       	out	0x39, r24	; 57
}
 e22:	08 95       	ret

00000e24 <Timerwave_NonPWM>:

void Timerwave_NonPWM (void){
	
	SET_BIT(DDRB,3); //OC0 as output
 e24:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM01); //CTC mode
 e26:	83 b7       	in	r24, 0x33	; 51
 e28:	88 60       	ori	r24, 0x08	; 8
 e2a:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
 e2c:	80 e4       	ldi	r24, 0x40	; 64
 e2e:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 e30:	83 b7       	in	r24, 0x33	; 51
 e32:	81 60       	ori	r24, 0x01	; 1
 e34:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 e36:	83 b7       	in	r24, 0x33	; 51
 e38:	84 60       	ori	r24, 0x04	; 4
 e3a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00); //TOGGLE OC0
 e3c:	83 b7       	in	r24, 0x33	; 51
 e3e:	80 61       	ori	r24, 0x10	; 16
 e40:	83 bf       	out	0x33, r24	; 51
}
 e42:	08 95       	ret

00000e44 <Timerwave_PWM>:

void Timerwave_PWM (void){
	
	SET_BIT(DDRB,3); //OC0 as output
 e44:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM00); //PWM mode
 e46:	83 b7       	in	r24, 0x33	; 51
 e48:	80 64       	ori	r24, 0x40	; 64
 e4a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01); //PWM mode
 e4c:	83 b7       	in	r24, 0x33	; 51
 e4e:	88 60       	ori	r24, 0x08	; 8
 e50:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
 e52:	80 e4       	ldi	r24, 0x40	; 64
 e54:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 e56:	83 b7       	in	r24, 0x33	; 51
 e58:	81 60       	ori	r24, 0x01	; 1
 e5a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 e5c:	83 b7       	in	r24, 0x33	; 51
 e5e:	84 60       	ori	r24, 0x04	; 4
 e60:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);
 e62:	83 b7       	in	r24, 0x33	; 51
 e64:	80 61       	ori	r24, 0x10	; 16
 e66:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 e68:	83 b7       	in	r24, 0x33	; 51
 e6a:	80 62       	ori	r24, 0x20	; 32
 e6c:	83 bf       	out	0x33, r24	; 51
	/*non_inverting mode
	SET_BIT(TCCR0,COM01); */
	
}
 e6e:	08 95       	ret

00000e70 <Timerwave_PhasecorrectPWM>:

void Timerwave_PhasecorrectPWM (void){
	
	SET_BIT(DDRB,3); //OC0 as output
 e70:	bb 9a       	sbi	0x17, 3	; 23
	SET_BIT(TCCR0,WGM00); //Phase correct PWM mode
 e72:	83 b7       	in	r24, 0x33	; 51
 e74:	80 64       	ori	r24, 0x40	; 64
 e76:	83 bf       	out	0x33, r24	; 51
	OCR0=64;
 e78:	80 e4       	ldi	r24, 0x40	; 64
 e7a:	8c bf       	out	0x3c, r24	; 60
	SET_BIT(TCCR0,CS00);
 e7c:	83 b7       	in	r24, 0x33	; 51
 e7e:	81 60       	ori	r24, 0x01	; 1
 e80:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
 e82:	83 b7       	in	r24, 0x33	; 51
 e84:	84 60       	ori	r24, 0x04	; 4
 e86:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM00);
 e88:	83 b7       	in	r24, 0x33	; 51
 e8a:	80 61       	ori	r24, 0x10	; 16
 e8c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
 e8e:	83 b7       	in	r24, 0x33	; 51
 e90:	80 62       	ori	r24, 0x20	; 32
 e92:	83 bf       	out	0x33, r24	; 51
	/*clear OC0 up counting,set OC0 down counting
	SET_BIT(TCCR0,COM01); */
}
 e94:	08 95       	ret

00000e96 <Timer2_overflow_init_interrupt>:

void Timer2_overflow_init_interrupt (void){
	
	SET_BIT(ASSR,AS2);
 e96:	82 b5       	in	r24, 0x22	; 34
 e98:	88 60       	ori	r24, 0x08	; 8
 e9a:	82 bd       	out	0x22, r24	; 34
	SET_BIT(TCCR2,CS20);
 e9c:	85 b5       	in	r24, 0x25	; 37
 e9e:	81 60       	ori	r24, 0x01	; 1
 ea0:	85 bd       	out	0x25, r24	; 37
	SET_BIT(TCCR2,CS22);
 ea2:	85 b5       	in	r24, 0x25	; 37
 ea4:	84 60       	ori	r24, 0x04	; 4
 ea6:	85 bd       	out	0x25, r24	; 37
	sei();
 ea8:	78 94       	sei
	SET_BIT(TIMSK,TOIE2);
 eaa:	89 b7       	in	r24, 0x39	; 57
 eac:	80 64       	ori	r24, 0x40	; 64
 eae:	89 bf       	out	0x39, r24	; 57
 eb0:	08 95       	ret

00000eb2 <__udivmodqi4>:
 eb2:	99 1b       	sub	r25, r25
 eb4:	79 e0       	ldi	r23, 0x09	; 9
 eb6:	04 c0       	rjmp	.+8      	; 0xec0 <__udivmodqi4_ep>

00000eb8 <__udivmodqi4_loop>:
 eb8:	99 1f       	adc	r25, r25
 eba:	96 17       	cp	r25, r22
 ebc:	08 f0       	brcs	.+2      	; 0xec0 <__udivmodqi4_ep>
 ebe:	96 1b       	sub	r25, r22

00000ec0 <__udivmodqi4_ep>:
 ec0:	88 1f       	adc	r24, r24
 ec2:	7a 95       	dec	r23
 ec4:	c9 f7       	brne	.-14     	; 0xeb8 <__udivmodqi4_loop>
 ec6:	80 95       	com	r24
 ec8:	08 95       	ret

00000eca <_exit>:
 eca:	f8 94       	cli

00000ecc <__stop_program>:
 ecc:	ff cf       	rjmp	.-2      	; 0xecc <__stop_program>
